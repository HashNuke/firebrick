---
- hosts: firebrick-servers
  remote_user: root
  vars:
    deployer: "deployer"
    project_path: "/home/{{deployer_user}}/projects/firebrick"
    project_version: "master"

  tasks:
    - name: "install system packages"
      apt: name="{{ item }}" update_cache=yes
      with_items:
        - automake
        - autoconf
        - libreadline-dev
        - libncurses-dev
        - libssl-dev
        - libyaml-dev
        - libxslt-dev
        - libffi-dev
        - libtool
        - unixodbc-dev
        - logrotate
        - monit

    - name: "create deployer user {{deployer}}"
      user: name="{{deployer}}"


    - name: "read authorized keys from root user"
      command: "cat ~/.ssh/authorized_keys"
      register: "root_authorized_keys"

    - debug: msg="{{ root_authorized_keys.stdout}}"

    - file: path="/home/{{deployer}}/.ssh" mode=0600 owner="{{deployer}}" state=directory

    # copy authorized_keys from root user to deployer user
    - name: "copy authorized keys to deployer user"
      shell: "echo '{{root_authorized_keys.stdout}}' >> /home/{{deployer}}/.ssh/authorized_keys"

    - name: "chown the authorized_keys file"
      file: path="/home/{{deployer}}/.ssh/authorized_keys" mode=0600 owner="{{deployer}}"

    - name: "install asdf"
      git: repo="https://github.com/HashNuke/asdf.git" dest="~/.asdf"
      remote_user: "{{deployer}}"

    # - name: "add asdf plugins"
    #   command: "asdf install {{item}} https://github.com/HashNuke/asdf-{{item}}.git"
    #   with_items:
    #     - nodejs
    #     - erlang
    #     - elixir
    #   remote_user: "{{deployer}}"

    # - name: "ensure projects directory"
    #   file: path="~/projects" state=directory
    #   remote_user: "{{deployer}}"

    # #TODO postgres
    # #TODO project-related (asdf, monit config, logrotate config, database)

    # - name: "clone firebrick project"
    #   git: repo="https://github.com/HashNuke/firebrick.git" dest="~/projects/firebrick"
    #   remote_user: "{{deployer}}"

    # - name: "install erlang, elixir & nodejs using asdf"
    #   command: "asdf install"
    #   remote_user: "{{deployer}}"

    # # - name: "create database"
    # # based on environment


    # - name: "fetch project dependencies"
    #   command: "mix deps.get"
    #   remote_user: "{{deployer}}"
    #   args:
    #     chdir: "{{project_dir}}"
    #     environment: "MIX_ENV={{ mix_env }}"


    # - name: "run database migrations"
    #   command: "mix ecto.migrate"
    #   remote_user: "{{deployer}}"
    #   args:
    #     chdir: "{{project_path}}"
    #     environment: "MIX_ENV={{ mix_env }}"


    # - name: "install frontend dependencies"
    #   #TODO skip production flag based on environment
    #   command: "npm install --production"
    #   remote_user: "{{deployer}}"
    #   args:
    #     chdir: "{{project_path}}/frontend"
    #     environment: "NODE_ENV={{ node_env }}"


    # - name: "build frontend"
    #   command: "npm run build-prod"
    #   remote_user: "{{deployer}}"
    #   args:
    #     chdir: "{{project_path}}/frontend"
    #     environment: "NODE_ENV={{ node_env }}"


    # - name: "copy monit config"
    #   template: src="firebrick.monit.j2" dest="/etc/monit/conf/firebrick.monit"


    # - name: start monit
    #   service: name=monit state=started enabled=yes

    # # - name: "copy logrotate config"
